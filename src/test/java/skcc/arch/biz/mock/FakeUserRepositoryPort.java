package skcc.arch.biz.mock;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import skcc.arch.biz.user.domain.User;
import skcc.arch.biz.user.service.port.UserRepositoryPort;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepositoryPort implements UserRepositoryPort {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();

    @Override
    public Optional<User> findById(Long id) {
        return data.stream().filter(item -> Objects.equals(item.getId(), id)).findAny();
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(item -> Objects.equals(item.getEmail(), email)).findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .username(user.getUsername())
                    .password(user.getPassword())
                    .status(user.getStatus())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public List<User> findAll() {
        return data.stream().toList();
    }

    @Override
    public Page<User> findAll(Pageable pageable) {
        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), data.size());
        List<User> subList = data.subList(start, end);
        return new org.springframework.data.domain.PageImpl<>(subList, pageable, data.size());
    }

    @Override
    public Page<User> findAdminUsers(Pageable pageable) {
        return null;
    }

    @Override
    public User updateStatus(User user) {
        return null;
    }

    @Override
    public Page<User> findAdminUsers(Pageable pageable, List<Long> userIds) {
        return null;
    }
}
